/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateResearcherArgs } from "./CreateResearcherArgs";
import { UpdateResearcherArgs } from "./UpdateResearcherArgs";
import { DeleteResearcherArgs } from "./DeleteResearcherArgs";
import { ResearcherFindManyArgs } from "./ResearcherFindManyArgs";
import { ResearcherFindUniqueArgs } from "./ResearcherFindUniqueArgs";
import { Researcher } from "./Researcher";
import { SurveyFindManyArgs } from "../../survey/base/SurveyFindManyArgs";
import { Survey } from "../../survey/base/Survey";
import { ResearcherService } from "../researcher.service";

@graphql.Resolver(() => Researcher)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class ResearcherResolverBase {
  constructor(
    protected readonly service: ResearcherService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Researcher",
    action: "read",
    possession: "any",
  })
  async _researchersMeta(
    @graphql.Args() args: ResearcherFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Researcher])
  @nestAccessControl.UseRoles({
    resource: "Researcher",
    action: "read",
    possession: "any",
  })
  async researchers(
    @graphql.Args() args: ResearcherFindManyArgs
  ): Promise<Researcher[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Researcher, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Researcher",
    action: "read",
    possession: "own",
  })
  async researcher(
    @graphql.Args() args: ResearcherFindUniqueArgs
  ): Promise<Researcher | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Researcher)
  @nestAccessControl.UseRoles({
    resource: "Researcher",
    action: "create",
    possession: "any",
  })
  async createResearcher(
    @graphql.Args() args: CreateResearcherArgs
  ): Promise<Researcher> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Researcher)
  @nestAccessControl.UseRoles({
    resource: "Researcher",
    action: "update",
    possession: "any",
  })
  async updateResearcher(
    @graphql.Args() args: UpdateResearcherArgs
  ): Promise<Researcher | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Researcher)
  @nestAccessControl.UseRoles({
    resource: "Researcher",
    action: "delete",
    possession: "any",
  })
  async deleteResearcher(
    @graphql.Args() args: DeleteResearcherArgs
  ): Promise<Researcher | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Survey])
  @nestAccessControl.UseRoles({
    resource: "Survey",
    action: "read",
    possession: "any",
  })
  async surveys(
    @graphql.Parent() parent: Researcher,
    @graphql.Args() args: SurveyFindManyArgs
  ): Promise<Survey[]> {
    const results = await this.service.findSurveys(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
