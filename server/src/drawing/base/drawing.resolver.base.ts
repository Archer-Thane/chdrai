/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateDrawingArgs } from "./CreateDrawingArgs";
import { UpdateDrawingArgs } from "./UpdateDrawingArgs";
import { DeleteDrawingArgs } from "./DeleteDrawingArgs";
import { DrawingFindManyArgs } from "./DrawingFindManyArgs";
import { DrawingFindUniqueArgs } from "./DrawingFindUniqueArgs";
import { Drawing } from "./Drawing";
import { SurveyFindManyArgs } from "../../survey/base/SurveyFindManyArgs";
import { Survey } from "../../survey/base/Survey";
import { Child } from "../../child/base/Child";
import { DrawingService } from "../drawing.service";

@graphql.Resolver(() => Drawing)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class DrawingResolverBase {
  constructor(
    protected readonly service: DrawingService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Drawing",
    action: "read",
    possession: "any",
  })
  async _drawingsMeta(
    @graphql.Args() args: DrawingFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Drawing])
  @nestAccessControl.UseRoles({
    resource: "Drawing",
    action: "read",
    possession: "any",
  })
  async drawings(
    @graphql.Args() args: DrawingFindManyArgs
  ): Promise<Drawing[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Drawing, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Drawing",
    action: "read",
    possession: "own",
  })
  async drawing(
    @graphql.Args() args: DrawingFindUniqueArgs
  ): Promise<Drawing | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Drawing)
  @nestAccessControl.UseRoles({
    resource: "Drawing",
    action: "create",
    possession: "any",
  })
  async createDrawing(
    @graphql.Args() args: CreateDrawingArgs
  ): Promise<Drawing> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        childId: args.data.childId
          ? {
              connect: args.data.childId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Drawing)
  @nestAccessControl.UseRoles({
    resource: "Drawing",
    action: "update",
    possession: "any",
  })
  async updateDrawing(
    @graphql.Args() args: UpdateDrawingArgs
  ): Promise<Drawing | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          childId: args.data.childId
            ? {
                connect: args.data.childId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Drawing)
  @nestAccessControl.UseRoles({
    resource: "Drawing",
    action: "delete",
    possession: "any",
  })
  async deleteDrawing(
    @graphql.Args() args: DeleteDrawingArgs
  ): Promise<Drawing | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Survey])
  @nestAccessControl.UseRoles({
    resource: "Survey",
    action: "read",
    possession: "any",
  })
  async surveys(
    @graphql.Parent() parent: Drawing,
    @graphql.Args() args: SurveyFindManyArgs
  ): Promise<Survey[]> {
    const results = await this.service.findSurveys(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Child, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Child",
    action: "read",
    possession: "any",
  })
  async childId(@graphql.Parent() parent: Drawing): Promise<Child | null> {
    const result = await this.service.getChildId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
